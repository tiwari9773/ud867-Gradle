task groovy << {}
println "Hello groovy"

/* Gradle is optionally typed lang*/
//def hell = 6.5
//println "I am : $hell"

/*
println "My Type is : ${hell.class} and My value is : $hell"
hell = "Now String"
println "My Type is : ${hell.class} and My value is : $hell"
*/

def foo = "bar"
println "$foo + foo = ${foo +"foo"}"

/*
//List in Groovy
def myList = ["hell1","Hell2","Hell2"]
def myList2 = ["hell3","Hell4","Hell5"]
//def printItem ={item -> println "List Item: $item"}
//myList.each(printItem)

myList.each{println "Inline Closures $it"}
myList2.each{println "Inline Closures $it"}
*/
/*
//Complex Functions
def doubleIt = {x-> x+x}

def applyTwice(func, arg)
{
    func(func(arg))
}

def foo =10
def fooDoubledTwice = applyTwice(doubleIt,foo)

println "Apply on $foo After $fooDoubledTwice"
*/

//Closures
/* hell = "Lokesh Tiwari"
def myClosures = {
  println "Test line one"
  println "Test line Two is $hell"
}

//myClosures()

def TestPass = myClosures;
TestPass()

*/

//Methods
/*def noArgs()
{
    println "No arg Methods"
}

def oneArgs(x)
{
    println "One arg Methods $x"
    x
}

def twoArgs(x, y)
{
    println "Two arg Methods $x and $y"
    x+y
}

noArgs()
oneArgs(500)
oneArgs 500
twoArgs 300, 200
twoArgs (300, 200)

//Nested
//twoArgs oneArgs 500, 200
twoArgs oneArgs (500), 200
*/

/*
println "Addition is : ${5+6}"

def doubleIt(n)
{
    n+n
}

def start = 5
println "Double is : ${doubleIt(start)}"

start = "Test Content"
println "Double is : ${doubleIt(start)}"    
*/

/*
class JavaTesting{
    public static void sayHello()
    {
        println "Hello Java n groovy"
    }
}

JavaTesting JavaTesting = new JavaTesting();
JavaTesting.sayHello();

*/